generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Episode {
  id          Int     @id @default(autoincrement())
  title       String?
  ssml_script String?
  raw_script  String?
  filename    String  @unique
  News        News[]

  Podcast     Podcast @relation(fields: [podcastType], references: [topic])
  podcastType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id           Int     @id @default(autoincrement())
  title        String
  content      String?
  summary      String
  source       String
  publish_date String
  url          String

  Episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Podcast {
  id          Int       @id @default(autoincrement())
  title       String
  topic       String    @unique
  description String?
  Episode     Episode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
